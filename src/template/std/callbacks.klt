/*
    Call back functions should accept the yield operation from the function this function would call.
    Therefore the functions should be made created by the translator of kilite.
*/

/* Integer functions */

function Integer_times(n:integer, f:func) {
    if (f.isUndefined) {
        let a:object = [];
        for (let i:integer = 0; i < n; ++i) {
            a.push(i);
        }
        return a;
    }
    for (let i:integer = 0; i < n; ++i) {
        f(i);
    }
}

function Integer_upto(val:integer, max:integer, callback:func) {
    var ary = [];
    var index = 0;
    if (callback.isFunction) {
        for (var i = val; i <= max; ++i) {
            ary[index] = callback(i, index);
            ++index;
        }
    } else {
        for (var i = val; i <= max; ++i) {
            ary[index++] = val;
        }
    }
    return ary;
}

function Integer_downto(val:integer, min:integer, callback:func) {
    var ary = [];
    var index = 0;
    if (callback.isFunction) {
        for (var i = val; i >= min; --i) {
            ary[index] = callback(i, index);
            ++index;
        }
    } else {
        for (var i = val; i >= min; --i) {
            ary[index++] = val;
        }
    }
    return ary;
}

/* String functions */

function String_replace(str: string, cond, newstr) {
    if (cond.isString) {
        if (newstr.isString) {
            return String.replaceByString(str, cond, newstr);
        }
        throw RuntimeException('Replacing must be done by string');
    } else if (cond.isRegex) {
        if (newstr.isString) {
            return cond.replaceOf(str, newstr);
        } else if (newstr.isFunction) {
            var start = 0, end = 0;
            var rstr = "";
            cond.reset(str);
            while (cond.find()) {
                var matched = cond.group[0];
                var mb = matched.begin;
                end = matched.end;
                rstr += String.subString(str, start, mb - start);
                rstr += newstr(cond.group);
                start = end;
            }
            if (start > 0) {
                rstr += String.subString(str, start);
            } else {
                rstr = str;
            }
            return rstr;
        }
        throw RuntimeException('Invalid replace condition');
    } else {
        throw RuntimeException('Invalid replace condition');
    }
};

/* Array functions */

function Array_each(a:object, f:func) {
    let n:integer = a.size();
    if (n > 0) {
        for (let i:integer = 0; i < n; ++i) {
            let r = f(a[i], i);
            if (r.isDefined && !r) {
                break;
            }
        }
    } else {
        let keys:object = a.keySet();
        let len:integer = keys.size();
        for (let i:integer = 0; i < len; ++i) {
            let key = keys[i];
            let r = f([key, a[key]], i);
            if (r.isDefined && !r) {
                break;
            }
        }
    }
}

function Array_map(a:object, f:func) {
    let r:object = [];
    let n:integer = a.size();
    for (let i:integer = 0; i < n; ++i) {
        r.push(f(a[i], i));
    }
    return r;
}

function Array_filter(a:object, f:func) {
    let r:object = [];
    let n:integer = a.size();
    for (let i:integer = 0; i < n; ++i) {
        if (f(a[i], i)) {
            r.push(a[i]);
        }
    }
    return r;
}

function Array_reject(a:object, f:func) {
    let r:object = [];
    let n:integer = a.size();
    for (let i:integer = 0; i < n; ++i) {
        if (!f(a[i], i)) {
            r.push(a[i]);
        }
    }
    return r;
}

function Array_flatMap(a:object, f:func) {
    return a.map(f).flatten();
}

function Array_findAll(a:object, f:func) {
    let r:object = [];
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        if (f(a[i], i)) {
            r.push(a[i]);
        }
    }
    return r;
}

function Array_reduce(a:object, f:func, initer) {
    let r = initer;
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        r = f(r, a[i], i);
    }
    return r;
}

function Array_all(a:object, f:func) {
    let r:object = [];
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        let r = f(a[i], i);
        if (r.isDefined && !r) {
            return false;
        }
    }
    return true;
}

function Array_any(a:object, f:func) {
    let r:object = [];
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        let r = f(a[i], i);
        if (r.isDefined && r) {
            return true;
        }
    }
    return false;
}

function Array_partition(a:object, cond:func) {
    let t:object = [];
    let f:object = [];
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        let e = a[i];
        if (cond(e)) {
            t.push(e);
        } else {
            f.push(e);
        }
    }
    return [t, f];
};

function Array_take(a:object, n:integer) {
    let r:object = [];
    let len:integer = a.size();
    if (n < len) {
        len = n;
    }
    for (let i:integer = 0; i < len; ++i) {
        r.push(a[i]);
    }
    return r;
};

function Array_takeWhile(a:object, f:func) {
    let r:object = [];
    let len:integer = a.size();
    for (let i:integer = 0; i < len; ++i) {
        if (!f(a[i])) {
            break;
        }
        r.push(a[i]);
    }
    return r;
};

function Array_drop(a:object, n:integer) {
    let r:object = [];
    let len:integer = a.size();
    for (let i = n; i < len; ++i) {
        r.push(a[i]);
    }
    return r;
};

function Array_dropWhile(a:object, f:func) {
    let r:object = [];
    let len:integer = a.size();
    let i:integer = 0;
    for ( ; i < len; ++i) {
        if (!f(a[i])) {
            break;
        }
    }
    for ( ; i < len; ++i) {
        r.push(a[i]);
    }
    return r;
};


function Array_sort(a:object, f:func) {
    function _quicksort(a, first, last, comp) {
        let i:integer = first;
        let j:integer = last;
        let x = a[(first + last) / 2];
        while (true) {
            while (comp(a[i], x) < 0) i++;
            while (comp(x, a[j]) < 0) j--;
            if (i >= j) break;
            [a[i], a[j]] = [a[j], a[i]];
            ++i; --j;
        }
        if (first  < i - 1)
            _quicksort(a, first , i - 1, comp);
        if (j + 1 < last)
            _quicksort(a, j + 1, last, comp);
    }
    a = a.clone();
    if (a.size() > 1) {
        _quicksort(a, 0, a.size() - 1, f.isDefined ? f : { => _1 <=> _2 });
    }
    return a;
}

/* File functions */

function File_create(filename:string, mode:integer, block:func) {
    var f = File._open(filename, mode);
    try {
        return block(f);
    } finally {
        f.close();
    }
}
